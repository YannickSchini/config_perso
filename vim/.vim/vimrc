" Plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive' " Git integration within Vim
Plug 'morhetz/gruvbox' " Colorscheme of choice
Plug 'tpope/vim-surround' " Management of 'surrounding pairs'
Plug 'tpope/vim-commentary' " Easy commenting/uncommenting
Plug 'vim-airline/vim-airline' " Status bar with relevant info on bottom of screen
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " Simple FZF Wrapper for Vim
Plug 'junegunn/fzf.vim' " More advanced FZF functions
Plug 'dense-analysis/ale' " Code linting for many languages
Plug 'sheerun/vim-polyglot' " Advanced code indentation & highlighting
Plug 'haya14busa/is.vim' " Plugin to improve search result highlighting
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Autocompletion and LSP support

call plug#end()

" Overall settings
set nu
set rnu
set wildmenu
set hidden
set incsearch
set hlsearch
set scrolloff=3 " Keep 3 lines below and above the cursor
set background=dark " Gruvbox dark version
let g:gruvbox_italic=1
" TODO: Figure out why contrast settings don't seem to make a difference
colorscheme gruvbox
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#poetv#enabled = 1
let g:ale_fix_on_save = 1
autocmd FileType python normal zR

" Identation
set expandtab
set autoindent

" Key mappings
let mapleader = " "
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
nnoremap <leader>gst :Git<CR>
nnoremap <leader>gci :Gcommit<CR>
nnoremap <leader>gpush :Gpush<CR>
nnoremap <leader>gpull :Gpull<CR>
nnoremap <leader>gf :Gfetch<CR>
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <C-h> :bprevious<CR>
nnoremap <C-j> :Buffers<CR>
nnoremap <C-k>  :bdelete<CR>
nnoremap <C-l> :bnext<CR>
nnoremap <leader>of :Files<CR>
nnoremap <leader>ff :Rg<CR>
nnoremap <leader>fix :ALEFix<CR>
nnoremap <leader>so :source $MYVIMRC<CR>
cmap w!! w !sudo tee > /dev/null %
nmap <leader>gd <Plug>(coc-definition)
nmap <leader>rn <Plug>(coc-rename)
vnoremap <leader>p "_P

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
